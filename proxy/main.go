package main

import (
	"context"
	"github.com/go-chi/chi"
	"github.com/go-chi/jwtauth"
	httpSwagger "github.com/swaggo/http-swagger/v2"
	"log"
	"main/proxy/auth"
	_ "main/proxy/docs" // docs is generated by Swag CLI, you have to import it.
	"net/http"
	"net/http/httputil"
	"net/url"
	"os"
	"os/signal"
	"time"
)

type server struct {
	port string
	s    *http.Server
}

// method serve
func (s server) Serve() {
	log.Printf("Starting server on port %s\n", s.port)
	err := s.s.ListenAndServe()
	if err != nil {
		log.Fatal(err)
	}
}
func (s server) Shutdown(ctx context.Context) error {
	return s.s.Shutdown(ctx)
}

var users = make(map[string]string)
var tokenAuth *jwtauth.JWTAuth

//	@title			Dadata API Proxy
//	@version		1.0
//	@description	This is a sample server geolocation service.

// @host	localhost:8080/
// @BasePath	/api/address
func main() {

	tokenAuth = jwtauth.New("HS256", []byte("secret"), nil)
	hugoURL, err := url.Parse("http://hugo:1313")
	if err != nil {
		panic(err)
	}
	hugoProxy := httputil.NewSingleHostReverseProxy(hugoURL)

	r := chi.NewRouter()
	r.Group(func(r chi.Router) {
		r.Get("/swagger/*", httpSwagger.Handler(
			httpSwagger.URL("http://localhost:8080/swagger/doc.json"), //The url pointing to API definition
		))

		r.Get("/api/", func(w http.ResponseWriter, r *http.Request) {
			w.Write([]byte("Hello from API"))
		})
		r.Get("/*", func(w http.ResponseWriter, r *http.Request) {
			hugoProxy.ServeHTTP(w, r)
		})
	})
	auth.Register(r, users)
	auth.LoginandProtectedRoutes(r, tokenAuth, users)

	var srv server = server{
		port: "8080",
		s: &http.Server{
			Addr:    ":8080",
			Handler: r,
		},
	}
	go srv.Serve()
	quit := make(chan os.Signal)
	signal.Notify(quit, os.Interrupt)
	<-quit
	log.Println("Shutdown Server ...")
	// Установка тайм-аута для завершения работы
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server Shutdown:", err)
	}

	log.Println("Server exiting")

}

type ReverseProxy struct {
	host string
	port string
}

func NewReverseProxy(host, port string) *ReverseProxy {
	return &ReverseProxy{
		host: host,
		port: port,
	}
}

func (rp *ReverseProxy) ReverseProxy(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

	})
}

func (rp *ReverseProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	http.Redirect(w, r, "http://"+rp.host+":"+rp.port+r.RequestURI, http.StatusFound)
}

// @contact.name	API Support
// @contact.url	https://github.com/go-chi/chi/issues
// @contact.email	6z6o8@example.com

// @license.name	Apache 2.0
// @license.url	http://www.apache.org/licenses/LICENSE-2.0.html
