package main

import (
	"github.com/go-chi/chi"
	httpSwagger "github.com/swaggo/http-swagger/v2"
	_ "main/proxy/docs" // docs is generated by Swag CLI, you have to import it.
	"main/proxy/geolocation"
	"net/http"
	"net/http/httputil"
	"net/url"
)

//	@title			Dadata API Proxy
//	@version		1.0
//	@description	This is a sample server geolocation service.

// @host	localhost:8080/
// @BasePath	/api/address
func main() {
	hugoURL, err := url.Parse("http://hugo:1313")
	if err != nil {
		panic(err)
	}
	hugoProxy := httputil.NewSingleHostReverseProxy(hugoURL)

	r := chi.NewRouter()
	r.Group(func(r chi.Router) {

		r.Get("/swagger/*", httpSwagger.Handler(
			httpSwagger.URL("http://localhost:8080/swagger/doc.json"), //The url pointing to API definition
		))
		r.Post("/api/address/search", func(w http.ResponseWriter, r *http.Request) {
			geolocation.Search(w, r)
		})
		r.Post("/api/address/geocode", func(w http.ResponseWriter, r *http.Request) {
			geolocation.Geocode(w, r)
		})
		r.Get("/api/", func(w http.ResponseWriter, r *http.Request) {
			w.Write([]byte("Hello from API"))
		})
		r.Get("/*", func(w http.ResponseWriter, r *http.Request) {
			hugoProxy.ServeHTTP(w, r)
		})
	})
	http.ListenAndServe(":8080", r)
}

type ReverseProxy struct {
	host string
	port string
}

func NewReverseProxy(host, port string) *ReverseProxy {
	return &ReverseProxy{
		host: host,
		port: port,
	}
}

func (rp *ReverseProxy) ReverseProxy(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

	})
}

func (rp *ReverseProxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	http.Redirect(w, r, "http://"+rp.host+":"+rp.port+r.RequestURI, http.StatusFound)
}
